# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import client.service.protocol_pb2 as protocol__pb2


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/protocol.Auth/Register',
                request_serializer=protocol__pb2.RegisterRequest.SerializeToString,
                response_deserializer=protocol__pb2.RegisterResponse.FromString,
                )
        self.Auth = channel.unary_unary(
                '/protocol.Auth/Auth',
                request_serializer=protocol__pb2.AuthRequest.SerializeToString,
                response_deserializer=protocol__pb2.AuthResponse.FromString,
                )
        self.PingRequest = channel.unary_unary(
                '/protocol.Auth/PingRequest',
                request_serializer=protocol__pb2.Ping.SerializeToString,
                response_deserializer=protocol__pb2.Ping.FromString,
                )
        self.PingStream = channel.unary_stream(
                '/protocol.Auth/PingStream',
                request_serializer=protocol__pb2.Ping.SerializeToString,
                response_deserializer=protocol__pb2.Ping.FromString,
                )


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Auth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PingRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PingStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=protocol__pb2.RegisterRequest.FromString,
                    response_serializer=protocol__pb2.RegisterResponse.SerializeToString,
            ),
            'Auth': grpc.unary_unary_rpc_method_handler(
                    servicer.Auth,
                    request_deserializer=protocol__pb2.AuthRequest.FromString,
                    response_serializer=protocol__pb2.AuthResponse.SerializeToString,
            ),
            'PingRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.PingRequest,
                    request_deserializer=protocol__pb2.Ping.FromString,
                    response_serializer=protocol__pb2.Ping.SerializeToString,
            ),
            'PingStream': grpc.unary_stream_rpc_method_handler(
                    servicer.PingStream,
                    request_deserializer=protocol__pb2.Ping.FromString,
                    response_serializer=protocol__pb2.Ping.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protocol.Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.Auth/Register',
            protocol__pb2.RegisterRequest.SerializeToString,
            protocol__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Auth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.Auth/Auth',
            protocol__pb2.AuthRequest.SerializeToString,
            protocol__pb2.AuthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PingRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.Auth/PingRequest',
            protocol__pb2.Ping.SerializeToString,
            protocol__pb2.Ping.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PingStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protocol.Auth/PingStream',
            protocol__pb2.Ping.SerializeToString,
            protocol__pb2.Ping.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MessengerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PingRequest = channel.unary_unary(
                '/protocol.Messenger/PingRequest',
                request_serializer=protocol__pb2.Ping.SerializeToString,
                response_deserializer=protocol__pb2.Ping.FromString,
                )
        self.PingStream = channel.unary_stream(
                '/protocol.Messenger/PingStream',
                request_serializer=protocol__pb2.Ping.SerializeToString,
                response_deserializer=protocol__pb2.Ping.FromString,
                )


class MessengerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PingRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PingStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessengerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PingRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.PingRequest,
                    request_deserializer=protocol__pb2.Ping.FromString,
                    response_serializer=protocol__pb2.Ping.SerializeToString,
            ),
            'PingStream': grpc.unary_stream_rpc_method_handler(
                    servicer.PingStream,
                    request_deserializer=protocol__pb2.Ping.FromString,
                    response_serializer=protocol__pb2.Ping.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protocol.Messenger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Messenger(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PingRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.Messenger/PingRequest',
            protocol__pb2.Ping.SerializeToString,
            protocol__pb2.Ping.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PingStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/protocol.Messenger/PingStream',
            protocol__pb2.Ping.SerializeToString,
            protocol__pb2.Ping.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
